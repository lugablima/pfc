// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  resolutions Resolution[]

  @@map("users")
}

model Module {
  id          String   @id @default(uuid())
  name        String   @unique
  sequence    Int      @unique @default(autoincrement())
  description String
  imageUrl    String
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  classes Class[]

  @@map("modules")
}

model Class {
  id        String   @id @default(uuid())
  name      String
  sequence  Int
  imageUrl  String
  isEnabled Boolean  @default(true)
  moduleId  String
  dueDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module    Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  video     Video?
  summary   Summary?
  exercises Exercise[]

  @@unique([name, moduleId])
  @@unique([sequence, moduleId])
  @@map("classes")
}

model Video {
  id        String   @id @default(uuid())
  url       String
  classId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("videos")
}

model Summary {
  id        String   @id @default(uuid())
  url       String
  classId   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)

  @@map("summaries")
}

model Exercise {
  id        String   @id @default(uuid())
  sequence  Int
  name      String
  statement String
  classId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  class       Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  tests       Test[]
  resolutions Resolution[]

  @@unique([name, classId])
  @@unique([sequence, classId])
  @@map("exercises")
}

model Test {
  id             String   @id @default(uuid())
  exerciseId     String
  inputs         Json
  inputDataType  String
  result         Json
  resultDataType String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model Resolution {
  id         String   @id @default(uuid())
  userId     String
  exerciseId String
  resolution Json
  grade      Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, exerciseId])
  @@map("resolutions")
}
